import numpy as np
from sklearn.cluster import DBSCAN
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

def draw_bounding_box(ax, points, color):
    # Compute min/max coordinates
    min_xyz = points.min(axis=0)
    max_xyz = points.max(axis=0)

    # Create bounding box vertices
    corners = np.array([
        [min_xyz[0], min_xyz[1], min_xyz[2]],
        [min_xyz[0], min_xyz[1], max_xyz[2]],
        [min_xyz[0], max_xyz[1], min_xyz[2]],
        [min_xyz[0], max_xyz[1], max_xyz[2]],
        [max_xyz[0], min_xyz[1], min_xyz[2]],
        [max_xyz[0], min_xyz[1], max_xyz[2]],
        [max_xyz[0], max_xyz[1], min_xyz[2]],
        [max_xyz[0], max_xyz[1], max_xyz[2]],
    ])

    # Define edges for the bounding box
    edges = [
        [0,1,3,2], [4,5,7,6], [0,1,5,4], [2,3,7,6], [0,2,6,4], [1,3,7,5]
    ]

    box = Poly3DCollection([corners[face] for face in edges], alpha=0.2, edgecolors=color, facecolors=color)
    ax.add_collection3d(box)

def main():
    # Sample points (x, y, z)
    points = np.array([
        # Cluster 1
        [1.0, 1.0, 0.0],
        [1.1, 1.0, 0.2],
        [0.9, 1.0, -0.1],
        [1.0, 1.1, 0.1],
        [1.0, 0.9, 0.0],

        # Cluster 2
        [10.0, 10.0, 1.0],
        [10.2, 10.1, 1.2],
        [9.9, 10.0, 0.9],
        [10.1, 9.8, 1.1],
        [10.0, 10.2, 1.3],
    ])

    # Apply DBSCAN
    dbscan = DBSCAN(eps=0.5, min_samples=2)
    labels = dbscan.fit_predict(points)

    # Plotting
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    unique_labels = set(labels)
    colors = ['r', 'g', 'b', 'c', 'm', 'y', 'tab:orange']

    for label in unique_labels:
        cluster_points = points[labels == label]

        if label == -1:
            color = 'k'
        else:
            color = colors[label % len(colors)]
            draw_bounding_box(ax, cluster_points, color)

        ax.scatter(cluster_points[:, 0], cluster_points[:, 1], cluster_points[:, 2], c=color, label=f'Cluster {label}' if label != -1 else 'Noise')

    ax.set_title("DBSCAN Clustering with 3D Bounding Boxes")
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")
    ax.legend()
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    main()
