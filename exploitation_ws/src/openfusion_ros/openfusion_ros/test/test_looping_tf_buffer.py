import rclpy
from rclpy.node import Node
from tf2_ros import Buffer, TransformListener
from rosgraph_msgs.msg import Clock
from builtin_interfaces.msg import Time
from rclpy.duration import Duration


def time_to_float(t: Time):
    return t.sec + t.nanosec * 1e-9


class TFLoopTestNode(Node):
    def __init__(self):
        super().__init__('tf_loop_test_node')
        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)
        self.latest_clock = None

        # Listen to simulated time
        self.create_subscription(Clock, '/clock', self.clock_callback, 10)

        # Periodically try a lookup
        self.create_timer(1.0, self.loop)

    def clock_callback(self, msg: Clock):
        current_time = msg.clock
        if self.latest_clock:
            prev = time_to_float(self.latest_clock)
            curr = time_to_float(current_time)
            if curr < prev:
                self.get_logger().warn("Detected rosbag loop! Clearing TF buffer.")
                self.tf_buffer.clear()

        self.latest_clock = current_time

    def loop(self):
        if self.latest_clock is None:
            self.get_logger().info("Waiting for clock...")
            return

        try:
            transform = self.tf_buffer.lookup_transform(
                'map', 'camera', self.latest_clock, timeout=Duration(seconds=0.2)
            )
            self.get_logger().info(f"TF at {time_to_float(self.latest_clock):.3f} â†’ Transform found.")
        except Exception as e:
            self.get_logger().warn(f"TF lookup failed: {e}")


def main(args=None):
    rclpy.init(args=args)
    node = TFLoopTestNode()
    rclpy.spin(node)
    rclpy.shutdown()
