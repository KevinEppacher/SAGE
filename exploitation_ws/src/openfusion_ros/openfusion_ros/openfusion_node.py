import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from tf2_msgs.msg import TFMessage
from cv_bridge import CvBridge
import cv2

class OpenFusionNode(Node):
    def __init__(self):
        super().__init__('openfusion_node')
        self.get_logger().info("OpenFusionNode initialized")
        self.frequency = 10
        self.rgb = None
        self.depth = None
        self.tf = None
        self.bridge = CvBridge()

        # ─── Subscriptions ─────────────────────────────
        self.rgb_sub = self.create_subscription(
            Image,
            '/rgb',
            self.rgb_callback,
            10
        )

        self.depth_sub = self.create_subscription(
            Image,
            '/depth',
            self.depth_callback,
            10
        )

        self.tf_sub = self.create_subscription(
            TFMessage,
            '/tf',
            self.tf_callback,
            10
        )

        self.timer = self.create_timer(1/self.frequency, self.timer_callback)  # 10Hz

    def rgb_callback(self, msg):
        self.rgb = msg

    def depth_callback(self, msg):
        self.depth = msg

    def tf_callback(self, msg):
        self.tf = msg

    def timer_callback(self):
        if self.rgb is not None:
            try:
                rgb_image = self.bridge.imgmsg_to_cv2(self.rgb, desired_encoding='bgr8')
                cv2.imshow("RGB Image", rgb_image)
            except Exception as e:
                self.get_logger().error(f"Failed to convert/display RGB image: {e}")

        if self.depth is not None:
            try:
                depth_image = self.bridge.imgmsg_to_cv2(self.depth, desired_encoding='passthrough')
                depth_normalized = cv2.normalize(depth_image, None, 0, 255, cv2.NORM_MINMAX)
                depth_colored = cv2.applyColorMap(depth_normalized.astype('uint8'), cv2.COLORMAP_JET)
                cv2.imshow("Depth Image", depth_colored)
            except Exception as e:
                self.get_logger().error(f"Failed to convert/display depth image: {e}")

        cv2.waitKey(1)  # required to keep imshow responsive