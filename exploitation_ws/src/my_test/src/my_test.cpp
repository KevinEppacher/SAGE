#include <rclcpp/rclcpp.hpp>
#include <rclcpp/clock.hpp>
#include <chrono>

#include <rclcpp/rclcpp.hpp>
#include <rclcpp/clock.hpp>
#include <chrono>

class ClockTester : public rclcpp::Node
{
public:
  ClockTester()
  : Node("clock_tester")
  {
    // ðŸ”‘ Declare before accessing get_clock()!
    this->declare_parameter("use_sim_time", false);

    bool use_sim_time = false;
    this->get_parameter("use_sim_time", use_sim_time);
    RCLCPP_INFO(this->get_logger(), "use_sim_time: %s", use_sim_time ? "true" : "false");

    // âœ… Now it's safe to get the correct clock (will sync with /clock if true)
    clock_ = this->get_clock();

    timer_ = this->create_wall_timer(
      std::chrono::seconds(1),
      std::bind(&ClockTester::printTime, this)
    );
  }

private:
  void printTime()
  {
    rclcpp::Time now = clock_->now();
    RCLCPP_INFO(this->get_logger(), "Current time: %ld.%09ld sec",
                now.seconds(), now.nanoseconds() % 1000000000);
  }

  std::shared_ptr<rclcpp::Clock> clock_;
  rclcpp::TimerBase::SharedPtr timer_;
};


int main(int argc, char ** argv)
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<ClockTester>());
  rclcpp::shutdown();
  return 0;
}
